#!/usr/bin/env python
# Copyright 2018 Jesús Carrete Montaña <jesus.carrete.montana@tuwien.ac.at>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os.path
import copy
import argparse

import tqdm
import numpy as np
import numpy.linalg as nla
import scipy as sp
import scipy.linalg as la
import ase.io
import ase.data
import matplotlib
import matplotlib.pyplot as plt
import phonopy

import decimation
from ipdb import set_trace
from pulgon_tools_wip.utils import (
    fast_orth,
    get_character,
    get_matrices,
    find_axis_center_of_nanotube,
    dimino_affine_matrix_and_subsquent,
    Cn,
    sigmaH,
    brute_force_generate_group_subsquent,
)
from pulgon_tools_wip.detect_point_group import LineGroupAnalyzer
from pulgon_tools_wip.detect_generalized_translational_group import CyclicGroupAnalyzer
from phonopy.phonon.band_structure import get_band_qpoints_and_path_connections
from phonopy.units import VaspToTHz

from pymatgen.core.operations import SymmOp
import logging
from ase import Atoms
from utilities import counting_y_from_xy, get_adapted_matrix


def orthogonalize(values, vectors):
    modules = np.abs(values)
    phases = np.angle(values)
    order = np.argsort(-modules)
    values = np.copy(values[order])
    vectors = np.copy(vectors[:, order])
    lo = 0
    hi = 1
    groups = []
    while True:
        if hi >= vectors.shape[1] or not np.isclose(
                values[hi], values[hi - 1], args.tolerance
        ):
            groups.append((lo, hi))
            lo = hi
        if hi >= vectors.shape[1]:
            break
        hi += 1
    for g in groups:
        lo, hi = g
        if hi > lo + 1:
            values[lo:hi] = values[lo:hi].mean()
            vectors[:, lo:hi] = la.orth(vectors[:, lo:hi])
    return values, vectors


matplotlib.rcParams["font.size"] = 16.0
NPOINTS = 11


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Compute the transmission across a defective Si nanowire"
    )
    parser.add_argument(
        "-e",
        "--eps",
        type=float,
        default=1e-5,
        help="prefactor for the imaginary part of the energies",
    )
    parser.add_argument(
        "-t",
        "--tolerance",
        type=float,
        default=1e-3,
        help="if a mode's eigenvalue has modulus > 1 - tolerance, consider"
        " it a propagating mode",
    )
    parser.add_argument(
        "-d",
        "--decimation",
        type=float,
        default=1e-8,
        help="tolerance for the decimation procedure",
    )
    parser.add_argument(
        "-m",
        "--maxiter",
        type=int,
        default=100000,
        help="maximum number of iterations in the decimation loop",
    )
    # parser.add_argument("phonopy_file", help="phonopy yaml file")
    # parser.add_argument("pure_fc_file", help="force constant file")
    # parser.add_argument("scatter_fc_file", help="force constant file")
    # parser.add_argument("defect_indices", help="force constant file")
    parser.add_argument("data_directory", help="directory")
    args = parser.parse_args()

    path_directory = args.data_directory
    path_phonopy_defect = os.path.join(path_directory, "phonopy_defect.yaml")
    path_phonopy_pure = os.path.join(path_directory, "phonopy_pure.yaml")
    path_LR_blocks = os.path.join(path_directory, "pure_fc.npz")
    path_scatter_blocks = os.path.join(path_directory, "scatter_fc.npz")
    path_defect_indices = os.path.join(path_directory, "defect_indices.npz")
    path_poscar = os.path.join(path_directory, "POSCAR")

    ######################### projector
    phonon = phonopy.load(phonopy_yaml=path_phonopy_pure, is_compact_fc=True)

    poscar_phonopy = phonon.primitive
    poscar_ase = Atoms(cell=poscar_phonopy.cell, positions=poscar_phonopy.positions, numbers=poscar_phonopy.numbers)
    cyclic = CyclicGroupAnalyzer(poscar_ase, tolerance=1e-2)
    atom = cyclic._primitive
    atom_center = find_axis_center_of_nanotube(atom)

    k_start = -np.pi
    k_end = np.pi

    path = [[[0, 0, k_start/2/np.pi], [0, 0, k_end/2/np.pi]]]
    qpoints, connections = get_band_qpoints_and_path_connections(
        path, npoints=NPOINTS
    )
    qpoints = qpoints[0]

    qpoints_1dim = np.linspace(k_start, k_end, num=NPOINTS, endpoint=k_end)
    a = cyclic._pure_trans
    qpoints_1dim = qpoints_1dim / a

    obj = LineGroupAnalyzer(atom_center, tolerance=1e-2)
    nrot = obj.get_rotational_symmetry_number()

    sym = []
    tran = SymmOp.from_rotation_and_translation(np.eye(3), [0, 0, 1])
    sym.append(tran.affine_matrix)
    pg1 = obj.get_generators()    # change the order to satisfy the character table

    sym.append(pg1[1])
    ops, order = brute_force_generate_group_subsquent(sym)
    if len(ops) != len(order):
        logging.ERROR("len(ops) != len(order)")

    ops_car_sym = []
    for op in ops:
        tmp_sym = SymmOp.from_rotation_and_translation(
            op[:3, :3], op[:3, 3] * cyclic._pure_trans
        )
        ops_car_sym.append(tmp_sym)
    matrices = get_matrices(atom_center, ops_car_sym)
    num_atoms = len(phonon.primitive.numbers)

    LR_blocks = np.load(path_LR_blocks)
    scatter_blocks = np.load(path_scatter_blocks)
    defect_indices = np.load(path_defect_indices)["defect_indices"]
    poscar = ase.io.read(path_poscar)
    phonon_defect = phonopy.load(phonopy_yaml=path_phonopy_defect, is_compact_fc=True)

    HL = LR_blocks["H00"]
    TL = LR_blocks["H01"]
    KC = scatter_blocks["Hc"]
    VLC = scatter_blocks["Vlc"]
    VCR = scatter_blocks["Vcr"]


    cells = max(defect_indices) + 1
    idx_scatter = np.where(defect_indices==int((cells-1)/2))[0]

    mass_C = np.diag(np.power(ase.data.atomic_masses[phonon_defect.primitive.numbers[idx_scatter]], -1/2))
    mass_L = np.diag(np.power(ase.data.atomic_masses[poscar.numbers], -1/2))
    mass_R = mass_L.copy()
    unit = 1e-24 * ase.units.m**2 * ase.units.kg / ase.units.J

    HL = unit * np.einsum('ijlm,jk->iklm',np.einsum('ij,jkln->ikln',mass_L, HL), mass_L)
    TL = unit * np.einsum('ijlm,jk->iklm',np.einsum('ij,jkln->ikln',mass_L, TL), mass_L)
    KC = unit * np.einsum('ijlm,jk->iklm',np.einsum('ij,jkln->ikln',mass_C, KC), mass_C)
    VLC = unit * np.einsum('ijlm,jk->iklm',np.einsum('ij,jkln->ikln',mass_L, VLC), mass_C)
    VCR = unit * np.einsum('ijlm,jk->iklm',np.einsum('ij,jkln->ikln',mass_C, VCR), mass_R)

    HL = HL.transpose((0, 2, 1, 3)).reshape((HL.shape[0] * 3, -1))
    TL = TL.transpose((0, 2, 1, 3)).reshape((TL.shape[0] * 3, -1))
    KC = KC.transpose((0, 2, 1, 3)).reshape((KC.shape[0] * 3, -1))
    VLC = VLC.transpose((0, 2, 1, 3)).reshape((VLC.shape[0] * 3, -1))
    VCR = VCR.transpose((0, 2, 1, 3)).reshape((VCR.shape[0] * 3, -1))

    # HL = adapted.conj().T @ HL @ adapted
    # TL = adapted.conj().T @ TL @ adapted
    HR = HL.copy()
    TR = TL.copy()

    aL = phonon.primitive.cell[2, 2]
    aR = aL

    # Plot the phonon spectra of both bulk leads.
    # qvec = np.linspace(0.0, 2.0 * np.pi, num=1001)
    qvec = np.linspace(-np.pi, np.pi, num=NPOINTS)
    omegaL, vgL = decimation.q2omega(HL, TL, qvec)
    # Compute all the parameters of the interface
    inc_omega = np.linspace(1e-4, omegaL.max() * 1.01, num=NPOINTS, endpoint=True)

    trans = np.zeros_like(inc_omega)
    trans_check = np.zeros_like(inc_omega)
    NLp = np.empty_like(inc_omega)
    NRp = np.empty_like(inc_omega)
    NLm = np.empty_like(inc_omega)
    NRm = np.empty_like(inc_omega)

    matrices_prob = []
    HL_complex = HL.astype(complex)
    TL_complex = TL.astype(complex)
    HR_complex = HR.astype(complex)
    TR_complex = TR.astype(complex)
    NLp_irreps = np.zeros((6, NPOINTS))   # the number of im
    for iomega, omega in enumerate(tqdm.tqdm(inc_omega, dynamic_ncols=True)):
        en = omega * (omega + 1.0j * args.eps)

        # Build the four retarded GFs of leads extending left or right.
        inv_gLretm = decimation.inv_g00(
            HL_complex, TL_complex, omega, args.eps, args.decimation, args.maxiter
        )
        inv_gLretp = decimation.inv_g00(
            HL_complex,
            TL_complex.conj().T,
            omega,
            args.eps,
            args.decimation,
            args.maxiter,
        )

        inv_gLadvm = inv_gLretm.conj().T
        inv_gLadvp = inv_gLretp.conj().T

        inv_gRretm = decimation.inv_g00(
            HR_complex, TR_complex, omega, args.eps, args.decimation, args.maxiter
        )
        inv_gRretp = decimation.inv_g00(
            HR_complex,
            TR_complex.conj().T,
            omega,
            args.eps,
            args.decimation,
            args.maxiter,
        )
        # And the four advanced versions, i.e., their Hermitian conjugates.
        # inv_gLadvm = inv_gLretm.conj().T
        # inv_gLadvp = inv_gLretp.conj().T
        inv_gRadvm = inv_gRretm.conj().T
        inv_gRadvp = inv_gRretp.conj().T


        # Build the Bloch matrices.
        FLretp = la.solve(inv_gLretp, TL.conj().T)

        inv_FLadvm = la.solve(inv_gLadvm, TL)

        ALretp, ULretp = orthogonalize(*la.eig(FLretp))
        ALadvm, ULadvm = orthogonalize(*la.eig(inv_FLadvm))

        mask_Lretp = np.isclose(np.abs(ALretp), 1.0, args.tolerance)
        mask_Ladvm = np.isclose(np.abs(ALadvm), 1.0, args.tolerance)

        print("---------- -----------")
        print("omega=", omega)

        # Build the retarded Green's function for the interface.
        HL_pr = HL + TL.conj().T @ la.solve(inv_gLretm, TL)
        HR_pr = HR + TR @ la.solve(inv_gRretp, TR.conj().T)

        # yapf: disable
        H_pr = np.block([
            [HL_pr, VLC, np.zeros((HL_pr.shape[0], HR_pr.shape[1]))],
            [VLC.conj().T, KC, VCR],
            [np.zeros((HR_pr.shape[0], HL_pr.shape[1])), VCR.conj().T, HR_pr]
        ])

        # yapf: enable
        Gret = la.pinv(
            en * np.eye(H_pr.shape[0], dtype=np.complex128) - H_pr, atol=1e-3
        )

        # Compute the total transmission.
        GammaL = (
                1.0j * TL.conj().T @ (la.solve(inv_gLretm, TL) - la.solve(inv_gLadvm, TL))
        )
        GammaR = (
                1.0j
                * TR
                @ (la.solve(inv_gRretp, TR.conj().T) - la.solve(inv_gRadvp, TR.conj().T))
        )
        GLRret = Gret[: HL_pr.shape[0], -HR_pr.shape[1]:]
        GRLret = Gret[-HR_pr.shape[0]:, : HL_pr.shape[1]]

        # GLRret = adapted.conj().T @ GLRret @ adapted
        # GRLret = adapted.conj().T @ GRLret @ adapted

        trans[iomega] = np.trace(
            GRLret @ (GRLret @ GammaL.conj().T).conj().T @ GammaR
        ).real

        k_w = np.pi * np.arccos(ALadvm[mask_Ladvm].real) / aL
        k_w = np.unique(k_w)
        for tmp_k in k_w:

            print("k=", tmp_k)
            adapted, dimensions = get_adapted_matrix([tmp_k], nrot, order, 2, aL, num_atoms, matrices)

            HL_adapted = adapted.conj().T @ HL @ adapted
            TL_adapted = adapted.conj().T @ TL @ adapted
            HR_adapted = HL_adapted.copy()
            TR_adapted = TL_adapted.copy()
            HL_complex_adapted = HL_adapted.astype(complex)
            TL_complex_adapted = TL_adapted.astype(complex)
            HR_complex_adapted = HR_adapted.astype(complex)
            TR_complex_adapted = TR_adapted.astype(complex)

            # Build the four retarded GFs of leads extending left or right.
            inv_gLretm = decimation.inv_g00(
                HL_complex_adapted, TL_complex_adapted, omega, args.eps, args.decimation, args.maxiter
            )
            inv_gLretp = decimation.inv_g00(
                HL_complex_adapted,
                TL_complex_adapted.conj().T,
                omega,
                args.eps,
                args.decimation,
                args.maxiter,
            )
            inv_gRretm = decimation.inv_g00(
                HR_complex_adapted, TR_complex_adapted, omega, args.eps, args.decimation, args.maxiter
            )
            inv_gRretp = decimation.inv_g00(
                HR_complex_adapted,
                TR_complex_adapted.conj().T,
                omega,
                args.eps,
                args.decimation,
                args.maxiter,
            )
            # And the four advanced versions, i.e., their Hermitian conjugates.
            inv_gLadvm = inv_gLretm.conj().T
            inv_gLadvp = inv_gLretp.conj().T
            inv_gRadvm = inv_gRretm.conj().T
            inv_gRadvp = inv_gRretp.conj().T

            # Build the Bloch matrices.
            FLretp = la.solve(inv_gLretp, TL_adapted.conj().T)
            FRretp = la.solve(inv_gRretp, TR_adapted.conj().T)
            FLadvp = la.solve(inv_gLadvp, TL_adapted.conj().T)
            FRadvp = la.solve(inv_gRadvp, TR_adapted.conj().T)
            inv_FLretm = la.solve(inv_gLretm, TL_adapted)
            inv_FRretm = la.solve(inv_gRretm, TR_adapted)
            inv_FLadvm = la.solve(inv_gLadvm, TL_adapted)
            inv_FRadvm = la.solve(inv_gRadvm, TR_adapted)

            # Build the retarded Green's function for the interface.
            HL_pr = HL_adapted + TL_adapted.conj().T @ la.solve(inv_gLretm, TL_adapted)
            HR_pr = HR_adapted + TR_adapted @ la.solve(inv_gRretp, TR_adapted.conj().T)

            # yapf: disable
            H_pr = np.block([
                [HL_pr, VLC, np.zeros((HL_pr.shape[0], HR_pr.shape[1]))],
                [VLC.conj().T, KC, VCR],
                [np.zeros((HR_pr.shape[0], HL_pr.shape[1])), VCR.conj().T, HR_pr]
            ])

            # yapf: enable
            Gret = la.pinv(
                en * np.eye(H_pr.shape[0], dtype=np.complex128) - H_pr, atol=1e-3
            )

            GLRret = Gret[: HL_pr.shape[0], -HR_pr.shape[1]:]
            GRLret = Gret[-HR_pr.shape[0]:, : HL_pr.shape[1]]

            # GLRret = adapted.conj().T @ GLRret @ adapted
            # GRLret = adapted.conj().T @ GRLret @ adapted


            start = 0
            for im, dim in enumerate(dimensions):
                end = start + dim

                # Solve the corresponding eigenvalue equations for the leads.
                # Look for degenerate modes and orthonormalize them.
                ALretp, ULretp = orthogonalize(*la.eig(FLretp[start:end, start:end]))
                ARretp, URretp = orthogonalize(*la.eig(FRretp[start:end, start:end]))
                ALadvp, ULadvp = orthogonalize(*la.eig(FLadvp[start:end, start:end]))
                ARadvp, URadvp = orthogonalize(*la.eig(FRadvp[start:end, start:end]))
                ALretm, ULretm = orthogonalize(*la.eig(inv_FLretm[start:end, start:end]))
                ARretm, URretm = orthogonalize(*la.eig(inv_FRretm[start:end, start:end]))
                ALadvm, ULadvm = orthogonalize(*la.eig(inv_FLadvm[start:end, start:end]))
                ARadvm, URadvm = orthogonalize(*la.eig(inv_FRadvm[start:end, start:end]))

                # Find out which modes are propagating.
                mask_Lretp = np.isclose(np.abs(ALretp), 1.0, args.tolerance)
                mask_Rretp = np.isclose(np.abs(ARretp), 1.0, args.tolerance)
                mask_Ladvp = np.isclose(np.abs(ALadvp), 1.0, args.tolerance)
                mask_Radvp = np.isclose(np.abs(ARadvp), 1.0, args.tolerance)
                mask_Lretm = np.isclose(np.abs(ALretm), 1.0, args.tolerance)
                mask_Rretm = np.isclose(np.abs(ARretm), 1.0, args.tolerance)
                mask_Ladvm = np.isclose(np.abs(ALadvm), 1.0, args.tolerance)
                mask_Radvm = np.isclose(np.abs(ARadvm), 1.0, args.tolerance)

                print("im=", im, mask_Lretp)
                # print(np.abs(ALretp))
                # print(mask_Rretp)
                # print(np.abs(ARretp))
                if mask_Lretp.any()==False:
                    start = copy.deepcopy(end)
                    continue

                # Compute the group velocity matrices.
                # yapf: disable
                VLretp = 1.j * aL * ULretp.conj().T @ TL_adapted[start:end, start:end] @ (
                        la.solve(inv_gLretp, TL_adapted.conj().T)[start:end, start:end] -
                        la.solve(inv_gLadvp, TL_adapted.conj().T)[start:end, start:end]
                ) @ ULretp / 2. / omega
                VRretp = 1.j * aR * URretp.conj().T @ TR_adapted[start:end, start:end] @ (
                        la.solve(inv_gRretp, TR_adapted.conj().T)[start:end, start:end] -
                        la.solve(inv_gRadvp, TR_adapted.conj().T)[start:end, start:end]
                ) @ URretp / 2. / omega
                VLadvp = 1.j * aL * ULadvp.conj().T @ TL_adapted[start:end, start:end] @ (
                        la.solve(inv_gLadvp, TL_adapted.conj().T)[start:end, start:end] -
                        la.solve(inv_gLretp, TL_adapted.conj().T)[start:end, start:end]
                ) @ ULadvp / 2. / omega
                VRadvp = 1.j * aR * URadvp.conj().T @ TR_adapted[start:end, start:end] @ (
                        la.solve(inv_gRadvp, TR_adapted.conj().T)[start:end, start:end] -
                        la.solve(inv_gRretp, TR_adapted.conj().T)[start:end, start:end]
                ) @ URadvp / 2. / omega
                VLretm = -1.j * aL * ULretm.conj().T @ TL_adapted.conj().T[start:end, start:end] @ (
                        la.solve(inv_gLretm, TL_adapted)[start:end, start:end] -
                        la.solve(inv_gLadvm, TL_adapted)[start:end, start:end]
                ) @ ULretm / 2. / omega
                VRretm = -1.j * aR * URretm.conj().T @ TR_adapted.conj().T[start:end, start:end] @ (
                        la.solve(inv_gRretm, TR_adapted)[start:end, start:end] -
                        la.solve(inv_gRadvm, TR_adapted)[start:end, start:end]
                ) @ URretm / 2. / omega
                VLadvm = -1.j * aL * ULadvm.conj().T @ TL_adapted.conj().T[start:end, start:end] @ (
                        la.solve(inv_gLadvm, TL_adapted)[start:end, start:end] -
                        la.solve(inv_gLretm, TL_adapted)[start:end, start:end]
                ) @ ULadvm / 2. / omega
                VRadvm = -1.j * aR * URadvm.conj().T @ TR_adapted.conj().T[start:end, start:end] @ (
                        la.solve(inv_gRadvm, TR_adapted)[start:end, start:end] -
                        la.solve(inv_gRretm, TR_adapted)[start:end, start:end]
                ) @ URadvm / 2. / omega

                # yapf: enable

                # Refine these matrices using the precomputed propagation masks.
                def refine(V, mask):
                    diag = np.diag(V)
                    nruter = np.zeros_like(diag)
                    nruter[mask] = diag[mask].real
                    return np.diag(nruter)

                VLretp = refine(VLretp, mask_Lretp)
                VRretp = refine(VRretp, mask_Rretp)
                VLadvp = refine(VLadvp, mask_Ladvp)
                VRadvp = refine(VRadvp, mask_Radvp)
                VLretm = refine(VLretm, mask_Lretm)
                VRretm = refine(VRretm, mask_Rretm)
                VLadvm = refine(VLadvm, mask_Ladvm)
                VRadvm = refine(VRadvm, mask_Radvm)


                VRretp12 = np.sqrt(VRretp)
                VLadvm12 = np.sqrt(VLadvm)
                VLretm12 = np.sqrt(VLretm)
                VRadvp12 = np.sqrt(VRadvp)

                tRL = (
                        2.0j
                        * omega
                        * (
                                VRretp12
                                @ la.solve(URretp, GRLret[start:end, start:end])
                                @ la.solve(ULadvm.conj().T, VLadvm12)
                                / np.sqrt(aR * aL)
                        )
                )
                tLR = (
                        2.0j
                        * omega
                        * (
                                VLretm12
                                @ la.solve(ULretm, GLRret[start:end, start:end])
                                @ la.solve(URadvp.conj().T, VRadvp12)
                                / np.sqrt(aR * aL)
                        )
                )

                #  Discard evanescent modes.
                tRL = tRL[mask_Rretp, :][:, mask_Ladvm]
                # print(tRL)
                probabilities = np.abs(tRL) ** 2
                matrices_prob.append(probabilities)
                # Compute the total transmission again.
                # NLp_irreps[im, iomega] = np.trace(ILretp).real
                NLp_irreps[im, iomega] += np.abs(np.diag(tRL.conj().T @ tRL)).sum().real
                start = copy.deepcopy(end)
                print("NLp_irreps", NLp_irreps[:, iomega])
                print("transmission", np.abs(np.diag(tRL.conj().T @ tRL)).sum().real)
                print("transmission", np.diag(tRL.conj().T @ tRL).sum().real)
                set_trace()

    NLp_sum = NLp_irreps.sum(axis=0)

    fig, ax = plt.subplots()
    plt.plot(np.array(inc_omega), trans, label="Caroli", color="grey")

    plt.plot(np.array(inc_omega), trans, label="Caroli", color="grey")
    plt.plot(np.array(inc_omega), NLp_sum, ".-", label="Irreps_sum", color="pink")

    # fig1, ax1 = plt.subplots()
    color = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'magenta', 'cyan', 'yellow', 'pink']
    labels = ["|m|=0","|m|=1","|m|=2","|m|=3","|m|=4","|m|=5","|m|=6","|m|=7","|m|=8","|m|=9"]
    NLp_irreps = np.array([NLp_irreps[2],NLp_irreps[1]+NLp_irreps[3],NLp_irreps[0]+NLp_irreps[4],NLp_irreps[5]])
    for ii, freq in enumerate(NLp_irreps):
        plt.plot(np.array(inc_omega), freq, label=labels[ii], color=color[ii])

    plt.xlim(left=0.0)
    plt.ylim(bottom=0.0)
    plt.legend(loc="best")
    plt.tight_layout()

    plt.savefig(os.path.join(path_directory, "transmission_sym_adapted_defect_21.png"), dpi=600)
    plt.show()
